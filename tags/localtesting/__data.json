{"type":"data","nodes":[null,null,{"type":"data","data":[{"filteredTag":1,"filteredPostsByTag":2},"localtesting",[3],{"title":4,"date":5,"draft":6,"summary":7,"tags":8,"type":10,"content":11,"slug":12},"Running ArgoCD locally","2024-06-14",false,"Run and test ArgoCD on your local machine",[9,1],"argocd","post","\u003Cp data-svelte-h=\"svelte-hzerox\">I recently found the need to stand up a local instance of \u003Ca href=\"https://argo-cd.readthedocs.io/en/stable/\" rel=\"nofollow\">ArgoCD\u003C/a>. By local I mean running on my personal machine. The primary goal was to learn ArgoCD while testing the deployment of an application. The most challenging part of this effort was presenting a git repo on the host machine to the local ArgoCD instance, which it then monitors for any app config changes.\u003C/p> \u003Cp data-svelte-h=\"svelte-f0kqi9\">Here are the overall steps:\u003C/p> \u003Cul data-svelte-h=\"svelte-k8f8vs\">\u003Cli>- Establish a local git repo\u003C/li> \u003Cli>- Set up a local K8s cluster\u003C/li> \u003Cli>- Stand up the ArgoCD instance\u003C/li> \u003Cli>- Deploy the application (via git repo)\u003C/li>\u003C/ul> \u003Ch2 data-svelte-h=\"svelte-4sbb5r\">My Local machine (specs that matter)\u003C/h2> \u003Cp data-svelte-h=\"svelte-knkh8c\">\u003Cstrong>OS\u003C/strong>: MacOS Sonoma\u003Cbr> \u003Cstrong>Processor Arch\u003C/strong>: Apple Silicon (M1, i.e. 64-bit ARM)\u003C/p> \u003Ch2 data-svelte-h=\"svelte-1e01thj\">Local git repo\u003C/h2> \u003Cp data-svelte-h=\"svelte-1gv1lk8\">On my machine I’m using this as the root directory for all the following configuration: \u003Ccode>/Users/Parth/Dev/k8s/local-argocd/\u003C/code>\u003C/p> \u003Cp data-svelte-h=\"svelte-ihztnf\">Create our \u003Ccode>foo\u003C/code> repo:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">\u003Cspan class=\"token builtin class-name\">cd\u003C/span> /Users/Parth/Dev/k8s/local-argocd\n\u003Cspan class=\"token function\">mkdir\u003C/span> foo-repo\n\u003Cspan class=\"token builtin class-name\">cd\u003C/span> foo-repo\n\u003Cspan class=\"token function\">git\u003C/span> init\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-kc08im\">We’ll come back to this towards this end.\u003C/p> \u003Ch2 data-svelte-h=\"svelte-1oxt60p\">Local K8s cluster\u003C/h2> \u003Cp data-svelte-h=\"svelte-1mwyjba\">I’m using Kind to create a basic Kubernetes cluster. You can find an earlier post on installing Kind and other pre-requisites \u003Ca href=\"/notes/Localkindcluster\">here\u003C/a>. This cluster would run both the ArgoCD instance and our test application in separate namespaces.\u003C/p> \u003Cp data-svelte-h=\"svelte-1jqvx2b\">I used a simple, single node cluster to run both the control plane and worker functions. The reason for this was the simplicity of storage. In a multi-node setup, presenting the same host directory on multiple nodes would be a complexity I didn’t feel was worth undertaking for this exercise.\u003C/p> \u003Cp data-svelte-h=\"svelte-mggp6e\">Cluster configuration:\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/kind-config.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Cluster\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> kind.x\u003Cspan class=\"token punctuation\">-\u003C/span>k8s.io/v1alpha4\n\u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> local\u003Cspan class=\"token punctuation\">-\u003C/span>argocd\n\u003Cspan class=\"token key atrule\">nodes\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">role\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> control\u003Cspan class=\"token punctuation\">-\u003C/span>plane\n    \u003Cspan class=\"token key atrule\">kubeadmConfigPatches\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token punctuation\">|\u003C/span>\u003Cspan class=\"token scalar string\">\n      kind: InitConfiguration\n      nodeRegistration:\n        kubeletExtraArgs:\n          node-labels: \"ingress-ready=true\"\u003C/span>\n    \u003Cspan class=\"token key atrule\">extraPortMappings\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">containerPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">80\u003C/span>\n      \u003Cspan class=\"token key atrule\">hostPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">80\u003C/span>\n      \u003Cspan class=\"token key atrule\">protocol\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> TCP\n    \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">containerPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">443\u003C/span>\n      \u003Cspan class=\"token key atrule\">hostPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">443\u003C/span>\n      \u003Cspan class=\"token key atrule\">protocol\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> TCP\n    \u003Cspan class=\"token key atrule\">extraMounts\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">hostPath\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> /Users/Parth/Dev/k8s/local\u003Cspan class=\"token punctuation\">-\u003C/span>argocd/foo\u003Cspan class=\"token punctuation\">-\u003C/span>repo\n        \u003Cspan class=\"token key atrule\">containerPath\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> /tmp/foo\u003Cspan class=\"token punctuation\">-\u003C/span>repo\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cul data-svelte-h=\"svelte-11h6fge\">\u003Cli>The \u003Ccode>kubeadmConfigPatches\u003C/code> section is passing a \u003Ccode>InitConfiguration\u003C/code> to our kind cluster which specifies extra args. These will allow us to set up the ingress that makes the GUI accessible on port 443.\u003C/li> \u003Cli>We are presenting the local git repo to the node in our configuration and mounting it to the path \u003Ccode>/tmp/foo-repo\u003C/code> on the node. Recall that our node is essentially a container.\u003C/li>\u003C/ul> \u003Cp data-svelte-h=\"svelte-pvrggb\">Create the cluster using this config:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kind create cluster \u003Cspan class=\"token parameter variable\">--config\u003C/span> /Users/Parth/Dev/k8s/local-argocd/kind-config.yaml\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-172ncxp\">\u003Cimg src=\"/kind-local-argocd-cluster-creation.png\" alt=\"kind cluster creation\">\u003C/p> \u003Ch2 data-svelte-h=\"svelte-zklhth\">Stand up ArgoCD\u003C/h2> \u003Cp data-svelte-h=\"svelte-1bok41v\">Deploying ArgoCD on this local cluster is the following three simple commands:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kubectl create namespace argocd\nkubectl apply \u003Cspan class=\"token parameter variable\">-n\u003C/span> argocd \u003Cspan class=\"token parameter variable\">-f\u003C/span> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\nkubectl apply \u003Cspan class=\"token parameter variable\">-f\u003C/span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cul data-svelte-h=\"svelte-1ow3ww5\">\u003Cli>First, we create the namespace called \u003Ccode>argocd\u003C/code>\u003C/li> \u003Cli>Next, the argocd controller in the created \u003Ccode>argocd\u003C/code> namespace\u003C/li> \u003Cli>Finally, the nginx controller in the created \u003Ccode>argocd\u003C/code> namespace\u003C/li>\u003C/ul> \u003Cp data-svelte-h=\"svelte-ihnypo\">But if you want the GUI accessible on your local HTTPS port create the following ingress deployment using the command \u003Ccode>kubectl apply -f /Users/Parth/Dev/k8s/local-argocd/argo-ingress.yaml\u003C/code>:\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/argo-ingress.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> networking.k8s.io/v1\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Ingress\n\u003Cspan class=\"token key atrule\">metadata\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\u003Cspan class=\"token punctuation\">-\u003C/span>server\u003Cspan class=\"token punctuation\">-\u003C/span>ingress\n  \u003Cspan class=\"token key atrule\">namespace\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\n  \u003Cspan class=\"token key atrule\">annotations\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">kubernetes.io/ingress.class\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> nginx\n    \u003Cspan class=\"token key atrule\">nginx.ingress.kubernetes.io/backend-protocol\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"HTTPS\"\u003C/span>\n    \u003Cspan class=\"token key atrule\">alb.ingress.kubernetes.io/ssl-passthrough\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"true\"\u003C/span>\n    \u003Cspan class=\"token key atrule\">nginx.ingress.kubernetes.io/force-ssl-redirect\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"false\"\u003C/span>\n\u003Cspan class=\"token key atrule\">spec\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">rules\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">host\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> localhost\n    \u003Cspan class=\"token key atrule\">http\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token key atrule\">paths\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">pathType\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Prefix\n        \u003Cspan class=\"token key atrule\">path\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> /\n        \u003Cspan class=\"token key atrule\">backend\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n          \u003Cspan class=\"token key atrule\">service\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n            \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\u003Cspan class=\"token punctuation\">-\u003C/span>server\n            \u003Cspan class=\"token key atrule\">port\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n              \u003Cspan class=\"token key atrule\">number\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">443\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1qntz74\">You should now be able to access the GUI at \u003Ccode>https://localhost\u003C/code>. To get the login password for the GUI (username admin), run:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kubectl \u003Cspan class=\"token parameter variable\">-n\u003C/span> argocd get secret argocd-initial-admin-secret \u003Cspan class=\"token parameter variable\">-o\u003C/span> \u003Cspan class=\"token assign-left variable\">jsonpath\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"&#123;.data.password&#125;\"\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> base64 \u003Cspan class=\"token parameter variable\">-d\u003C/span> \u003Cspan class=\"token operator\">&amp;&amp;\u003C/span> \u003Cspan class=\"token builtin class-name\">echo\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1jlv4bx\">You would need to select ‘Proceed anyways’ for the cert error since we’ve not signed our cert.\u003C/p> \u003Cp data-svelte-h=\"svelte-1tm408y\">To teardown run the following commands:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kubectl delete \u003Cspan class=\"token parameter variable\">-f\u003C/span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml\nkubectl \u003Cspan class=\"token parameter variable\">-n\u003C/span> argocd delete \u003Cspan class=\"token parameter variable\">-f\u003C/span> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\nkubectl delete \u003Cspan class=\"token parameter variable\">-f\u003C/span> /Users/Parth/Dev/k8s/local-argocd/argo-ingress.yaml\nkubectl delete namespace argocd\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1v3jboq\">You can stop here if just getting a local ArgoCD server up and running is your goal. Read on for getting the git repo set up.\u003C/p> \u003Ch2 data-svelte-h=\"svelte-grvw7e\">Deploy an application\u003C/h2> \u003Ch3 data-svelte-h=\"svelte-mvq507\">Kustomize\u003C/h3> \u003Cp data-svelte-h=\"svelte-ouf2gg\">In simple terms, \u003Ca href=\"https://kustomize.io\" rel=\"nofollow\">Kustomize\u003C/a> is a tool that allows you to manipulate Kubernetes resources and objects. For instance, when you use the command \u003Ccode>kubectl edit deployment foo-deployment\u003C/code>, Kustomize is invoked to edit the resource. But it can do more than that as you shall see in a bit.\u003C/p> \u003Cp data-svelte-h=\"svelte-115fbgd\">Here we use Kustomize to manage and modify our resource definitions. Let’s create a few directories under our root directory:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">\u003Cspan class=\"token builtin class-name\">cd\u003C/span> /Users/Parth/Dev/k8s/local-argocd\n\u003Cspan class=\"token function\">mkdir\u003C/span> \u003Cspan class=\"token parameter variable\">-p\u003C/span> k8s/base\n\u003Cspan class=\"token function\">mkdir\u003C/span> \u003Cspan class=\"token parameter variable\">-p\u003C/span> k8s/overlays/dev\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1vamj07\">The \u003Ccode>base\u003C/code> dir will contain resource definitions that Kustomize will manage. \u003Ccode>overlays\u003C/code> on the other hand will contain modifications (patches) to those resources. Under the \u003Ccode>overlays\u003C/code> you can further group by environments leading to different mods for each env.\u003C/p> \u003Cp data-svelte-h=\"svelte-1e4a15q\">So far, our directory structure looks like this:\u003C/p> \u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">local-argocd\n|-- foo-repo\n|-- k8s\n|   |-- base\n|   |-- overlays/dev\n|-- kind-config.yaml\n|-- argo-ingress.yaml\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-d0imo4\">We will store all the base configuration, much of what we saw so far, like the ingress definition in here. In addition, we’d define a Kustomize specific file that allows it to manage those resources. Move the \u003Ccode>argo-ingress.yaml\u003C/code> file in here. Next, define the following:\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/k8s/base/kustomization.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> kustomize.config.k8s.io/v1beta1\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Kustomization\n\n\u003Cspan class=\"token key atrule\">namespace\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\n\n\u003Cspan class=\"token key atrule\">resources\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token punctuation\">-\u003C/span> https\u003Cspan class=\"token punctuation\">:\u003C/span>//raw.githubusercontent.com/argoproj/argo\u003Cspan class=\"token punctuation\">-\u003C/span>cd/master/manifests/install.yaml\n\u003Cspan class=\"token punctuation\">-\u003C/span> https\u003Cspan class=\"token punctuation\">:\u003C/span>//raw.githubusercontent.com/kubernetes/ingress\u003Cspan class=\"token punctuation\">-\u003C/span>nginx/master/deploy/static/provider/kind/deploy.yaml\n\u003Cspan class=\"token punctuation\">-\u003C/span> argo\u003Cspan class=\"token punctuation\">-\u003C/span>ingress.yaml\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-dah9kq\">The \u003Ccode>resources\u003C/code> section tells Kustomize that we want it to manage the mentioned resources. This includes the controller installation manifests (the individual bash commands we ran earlier) and the ingress deployment.\u003C/p> \u003Cp data-svelte-h=\"svelte-nbfb2a\">You might be thinking as to why we need something like Kustomize at all. The reason, as you’ll see next, is otherwise we’d have to modify the upstream manifests we are calling in our \u003Ccode>resources\u003C/code> section - specifically the ArgoCD instance. Which would be a complicated task.\u003C/p> \u003Cp data-svelte-h=\"svelte-14p4zf\">Now that we have our base configuration defined. Let’s declare the changes we’d want to make on top - we want the ArgoCD instance to see the local directory we have mounted on the node. First we start with the file that tells Kustomize what resource to modify and how. Create this file under \u003Ccode>overlays/dev\u003C/code> (\u003Cstrong>Note\u003C/strong>: This is separate from the \u003Ccode>kustomization.yaml\u003C/code> under base):\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/k8s/overlays/dev/kustomization.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> kustomize.config.k8s.io/v1beta1\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Kustomization\n\n\u003Cspan class=\"token key atrule\">resources\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token punctuation\">-\u003C/span> ../../base\n\u003Cspan class=\"token punctuation\">-\u003C/span> my\u003Cspan class=\"token punctuation\">-\u003C/span>app.yaml\n\n\u003Cspan class=\"token key atrule\">patches\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">path\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> local\u003Cspan class=\"token punctuation\">-\u003C/span>git\u003Cspan class=\"token punctuation\">-\u003C/span>repo.yaml\n  \u003Cspan class=\"token key atrule\">target\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Deployment\n    \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\u003Cspan class=\"token punctuation\">-\u003C/span>repo\u003Cspan class=\"token punctuation\">-\u003C/span>server\n    \u003Cspan class=\"token key atrule\">namespace\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-t1tm9g\">The \u003Ccode>resources\u003C/code> section tells the resources in scope. The \u003Ccode>my-app.yaml\u003C/code> is our app definition. Pin that aside for now. The \u003Ccode>patches\u003C/code> section tells Kustomize to apply a ‘patch’ to modify our ArgoCD deployment. The path to the patch is in the \u003Ccode>path\u003C/code> field.\u003C/p> \u003Cp data-svelte-h=\"svelte-1917mjx\">Next, define the actual patch:\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/k8s/overlays/dev/local-git-repo.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> apps/v1\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Deployment\n\u003Cspan class=\"token key atrule\">metadata\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\u003Cspan class=\"token punctuation\">-\u003C/span>repo\u003Cspan class=\"token punctuation\">-\u003C/span>server\n\u003Cspan class=\"token key atrule\">spec\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">template\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">spec\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token key atrule\">containers\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\u003Cspan class=\"token punctuation\">-\u003C/span>repo\u003Cspan class=\"token punctuation\">-\u003C/span>server\n        \u003Cspan class=\"token key atrule\">volumeMounts\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n        \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">mountPath\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">'/tmp/foo-repo'\u003C/span> \u003Cspan class=\"token comment\"># path on container\u003C/span>\n          \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> local\u003Cspan class=\"token punctuation\">-\u003C/span>git\u003Cspan class=\"token punctuation\">-\u003C/span>repo\n          \u003Cspan class=\"token key atrule\">readOnly\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token boolean important\">true\u003C/span>\n      \u003Cspan class=\"token key atrule\">volumes\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> local\u003Cspan class=\"token punctuation\">-\u003C/span>git\u003Cspan class=\"token punctuation\">-\u003C/span>repo\n        \u003Cspan class=\"token key atrule\">hostPath\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n          \u003Cspan class=\"token key atrule\">path\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">'/tmp/foo-repo'\u003C/span> \u003Cspan class=\"token comment\"># matches containerPath on node\u003C/span>\n          \u003Cspan class=\"token key atrule\">type\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Directory\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-9hrb95\">This updates the \u003Ccode>argocd-repo-server\u003C/code> container in the ArgoCD deployment, one of the many containers needed to run ArgoCD. This also specifies the host (i.e. the node) path that the container must mount locally (as ReadOnly).\u003C/p> \u003Cp data-svelte-h=\"svelte-1ghxss8\">Finally, we define our foo application:\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/k8s/overlays/dev/my-app.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argoproj.io/v1alpha1\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Application\n\u003Cspan class=\"token key atrule\">metadata\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> my\u003Cspan class=\"token punctuation\">-\u003C/span>app\n  \u003Cspan class=\"token key atrule\">namespace\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> argocd\n\u003Cspan class=\"token key atrule\">spec\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">project\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> default\n  \u003Cspan class=\"token key atrule\">destination\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">namespace\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> my\u003Cspan class=\"token punctuation\">-\u003C/span>app\n    \u003Cspan class=\"token key atrule\">server\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> https\u003Cspan class=\"token punctuation\">:\u003C/span>//kubernetes.default.svc\n  \u003Cspan class=\"token key atrule\">source\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">path\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> apps/test\u003Cspan class=\"token punctuation\">-\u003C/span>app \u003Cspan class=\"token comment\"># source of manifests\u003C/span>\n    \u003Cspan class=\"token key atrule\">repoURL\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">'file:///tmp/foo-repo'\u003C/span>\n    \u003Cspan class=\"token key atrule\">targetRevesion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> HEAD\n  \u003Cspan class=\"token key atrule\">syncPolicy\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token comment\"># Enables auto-sync\u003C/span>\n    \u003Cspan class=\"token comment\"># automated: &#123;&#125;\u003C/span>\n    \u003Cspan class=\"token key atrule\">automated\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token key atrule\">prune\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token boolean important\">true\u003C/span>\n    \u003Cspan class=\"token key atrule\">syncOptions\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> CreateNamespace=true\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-4yxyyr\">Our directory structure looks like this:\u003C/p> \u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">local-argocd\n|-- foo-repo\n|-- k8s\n|   |-- base\n|   |    |-- argo-ingress.yaml\n|   |    |-- kustomization.yaml\n|   |-- overlays/dev\n|        |-- kustomization.yaml\n|        |-- local-git-repo.yaml\n|        |-- my-app.yaml\n|-- kind-config.yaml\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Ch3 data-svelte-h=\"svelte-1fk7144\">Dummy application\u003C/h3> \u003Cp data-svelte-h=\"svelte-1y08tt6\">We’re almost there, hang in there a bit longer.\n\u003Cimg src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExY2xpOXZnOGx2dDNjd3h2dG9yY2tsc3B3YjMxYTNvdjJ4OXFxcnZrbyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3FQxaJJkQR8U4gdzr0/giphy.gif\" alt=\"Endgame quote giphy\">\u003C/p> \u003Cp data-svelte-h=\"svelte-1sa52mv\">I’m going to use Hashicorp’s \u003Ca href=\"https://github.com/hashicorp/http-echo\" rel=\"nofollow\">http-echo\u003C/a> docker image as our application. To see ArgoCD in action, we’ll iterate over a few versions of this image starting with \u003Ccode>v0.2.3\u003C/code>. Go ahead and add the deployment and service definitions.\u003C/p> \u003Ch5 data-svelte-h=\"svelte-19xfu2n\">Deployment:\u003C/h5> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/foo-repo/apps/test-app/deployment.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> apps/v1\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Deployment\n\u003Cspan class=\"token key atrule\">metadata\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> nginx\u003Cspan class=\"token punctuation\">-\u003C/span>dummy\u003Cspan class=\"token punctuation\">-\u003C/span>app\n\u003Cspan class=\"token key atrule\">spec\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">replicas\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\n  \u003Cspan class=\"token key atrule\">selector\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">matchLabels\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token key atrule\">app\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> nginx\u003Cspan class=\"token punctuation\">-\u003C/span>dummy\n  \u003Cspan class=\"token key atrule\">template\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">metadata\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token key atrule\">labels\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n        \u003Cspan class=\"token key atrule\">app\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> nginx\u003Cspan class=\"token punctuation\">-\u003C/span>dummy\n    \u003Cspan class=\"token key atrule\">spec\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token key atrule\">containers\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">image\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> hashicorp/http\u003Cspan class=\"token punctuation\">-\u003C/span>echo\u003Cspan class=\"token punctuation\">:\u003C/span>0.2.3\n        \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> nginx\u003Cspan class=\"token punctuation\">-\u003C/span>dummy\n        \u003Cspan class=\"token key atrule\">args\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n        \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token string\">\"-text=foo\"\u003C/span>\n        \u003Cspan class=\"token key atrule\">ports\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n        \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">containerPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">80\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Ch5 data-svelte-h=\"svelte-1h5o4ej\">Service:\u003C/h5> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># /Users/Parth/Dev/k8s/local-argocd/foo-repo/apps/test-app/svc.yaml\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> v1\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Service\n\u003Cspan class=\"token key atrule\">metadata\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> nginx\u003Cspan class=\"token punctuation\">-\u003C/span>dummy\u003Cspan class=\"token punctuation\">-\u003C/span>svc\n\u003Cspan class=\"token key atrule\">spec\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">ports\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">port\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">80\u003C/span>\n    \u003Cspan class=\"token key atrule\">targetPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">80\u003C/span>\n  \u003Cspan class=\"token key atrule\">selector\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">app\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> nginx\u003Cspan class=\"token punctuation\">-\u003C/span>dummy\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-16ri73g\">Make sure you do a \u003Ccode>git add\u003C/code> and \u003Ccode>git commit\u003C/code> to our foo repo.\u003C/p> \u003Cp data-svelte-h=\"svelte-ea0y3u\">With this, deploying ArgoCD along with our app, essentially becomes the following commands:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kubectl create \u003Cspan class=\"token parameter variable\">-k\u003C/span> /Users/Parth/Dev/k8s/local-argocd/k8s/overlays/dev\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-hb0h5x\">\u003Cstrong>Note\u003C/strong> You might see an error like below:\u003C/p> \u003Cpre class=\"language-undefined\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-undefined\">error: resource mapping not found for name: &quot;my-app&quot; namespace: &quot;argocd&quot; from &quot;k8s/overlays/dev&quot;: no matches for kind &quot;Application&quot; in version &quot;argoproj.io/v1alpha1&quot;\nensure CRDs are installed first\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-yr8c5l\">Run \u003Ccode>kubectl apply -k /Users/Parth/Dev/k8s/local-argocd/k8s/overlays/dev\u003C/code> and that should fix it.\u003C/p> \u003Cp data-svelte-h=\"svelte-1dp16qu\">You should now see that ArgoCD picked up our manifests and has started deploying it:\n\u003Cimg src=\"/argocd-deploy-v023.png\" alt=\"ArgoCD app screenshot\">\u003C/p> \u003Cp data-svelte-h=\"svelte-flrjjq\">Now lets bump up the version. Update the \u003Ccode>image\u003C/code> from \u003Ccode>0.2.3\u003C/code> to \u003Ccode>1.0.0\u003C/code>. You may have to hit the refresh button to see the effect: our current app pod gets terminated and a new one with the latest version gets created.\n\u003Cimg src=\"/argocd-deploy-v100.png\" alt=\"ArgoCD app screenshot\">\u003C/p> \u003Cp data-svelte-h=\"svelte-il5ez9\">Finally, to tear everything down:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kubectl delete \u003Cspan class=\"token parameter variable\">-k\u003C/span> /Users/Parth/Dev/k8s/local-argocd/k8s/overlays/dev\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>","LocalArgocd"],"uses":{"params":["filteredTag"]}}]}
