{"type":"data","nodes":[null,null,{"type":"data","data":[{"posts":1},[2,13,22],{"title":3,"date":4,"draft":5,"summary":6,"tags":7,"content":11,"slug":12},"Kind on local machine","2024-04-23",false,"Build and run a lightweight Kubernetes cluster on your machine",[8,9,10],"containers","k8s","kind","\u003Cp data-svelte-h=\"svelte-f6rzge\">I’m a big proponent of local testing. Being able to test a piece of code or configuration locally greatly increases developement and deployment speed. Its better to fail fast, and, in a sandboxed/controlled environment before deploying in production. Finally it also serves as a way to tinker (and break stuff) and learn.\u003C/p> \u003Cp data-svelte-h=\"svelte-qhcmb2\">Most of the applications I write and deploy end up being packaged as container images and run on orchestration platforms like Docker or Kubernetes. I’ve found a local Kubernetes cluster to be a life saver and a great way to expand my learning.\u003C/p> \u003Ch2 data-svelte-h=\"svelte-4sbb5r\">My Local machine (specs that matter)\u003C/h2> \u003Cp data-svelte-h=\"svelte-knkh8c\">\u003Cstrong>OS\u003C/strong>: MacOS Sonoma\u003Cbr> \u003Cstrong>Processor Arch\u003C/strong>: Apple Silicon (M1, i.e. 64-bit ARM)\u003C/p> \u003Ch2 data-svelte-h=\"svelte-136tnhu\">Installation\u003C/h2> \u003Cp data-svelte-h=\"svelte-e8s31t\">On Mac its as simple as \u003Ccode>brew install kind\u003C/code>. For alternatives check the Kind docs \u003Ca href=\"https://kind.sigs.k8s.io/docs/user/quick-start#installation\" rel=\"nofollow\">here\u003C/a>. In addition you’d want to have the following installed: Docker or an alternative runtime, and, kubectl.\u003C/p> \u003Ch3 data-svelte-h=\"svelte-l42sja\">Pre-requisites\u003C/h3> \u003Ch4 data-svelte-h=\"svelte-10fjmix\">Container runtime: Docker\u003C/h4> \u003Cp data-svelte-h=\"svelte-me7311\">Ensure you have Docker (Desktop, since this is a mac setup) installed as well. This is because Kind uses Docker containers by default to “emulate” Kubernetes nodes. This will add some additional complexity in our configuration and we shall see that shortly in the form of \u003Ccode>extraPortMappings\u003C/code> when defining our cluster config YAMLs. In summary, bear in mind your Kubernetes nodes are containers acting as if they are nodes. You can download the Docker desktop dmg from \u003Ca href=\"https://www.docker.com/products/docker-desktop/\" rel=\"nofollow\">here\u003C/a> and install it.\u003C/p> \u003Cp data-svelte-h=\"svelte-1m8004a\">If you are running this on your work Macbook or for another reason you don’t have Docker desktop license you can consider an alternative like \u003Ca href=\"https://github.com/abiosoft/colima\" rel=\"nofollow\">Colima\u003C/a>. \u003Ca href=\"https://jacobtomlinson.dev/posts/2022/goodbye-docker-desktop-for-mac-hello-colima/\" rel=\"nofollow\">Here’s\u003C/a> a great post on getting started on Colima. If using this approach, we have yet another “layer” to our setup: Colima spins up VM(s) with the Docker (by default) daemon running. This VM runs Docker containers that will emulate our Kubernetes nodes.\u003C/p> \u003Cp data-svelte-h=\"svelte-17vqrl4\">If you took the Docker desktop route, ensure it is running at this point.\u003C/p> \u003Cp data-svelte-h=\"svelte-yc0ik7\">If you took the Colima route, start the Colima VM using:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">\u003Cspan class=\"token comment\"># Use host networking for the VM, use 3 vCPUs, 6GiB of memory and OS architecture as arm64\u003C/span>\ncolima start --network-address \u003Cspan class=\"token parameter variable\">--cpu\u003C/span> \u003Cspan class=\"token number\">3\u003C/span> \u003Cspan class=\"token parameter variable\">--memory\u003C/span> \u003Cspan class=\"token number\">6\u003C/span> \u003Cspan class=\"token parameter variable\">--arch\u003C/span> arm64\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1pgcg23\">\u003Cem>\u003Cstrong>Note: Change the \u003Ccode>--arch\u003C/code> to the architecture of your choice and ensure you pull images for it\u003C/strong>\u003C/em>\u003C/p> \u003Cp data-svelte-h=\"svelte-1puip81\">Here are some useful colima commands:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">colima list   \u003Cspan class=\"token comment\"># List your VM(s)\u003C/span>\ncolima status\ncolima stop   \u003Cspan class=\"token comment\"># Stop your VM\u003C/span>\ncolima \u003Cspan class=\"token function\">ssh\u003C/span>    \u003Cspan class=\"token comment\"># SSH into your colima VM\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Ch4 data-svelte-h=\"svelte-1ymc1wh\">Interacting with the cluster: kubectl\u003C/h4> \u003Cp data-svelte-h=\"svelte-gyew37\">\u003Ca href=\"https://kubernetes.io/docs/tasks/tools/\" rel=\"nofollow\">Kubectl\u003C/a> is a cli that is most commonly used to inteact with your cluster via the Kube API server. Installing it is as simple as \u003Ccode>brew install kubectl\u003C/code>. For alternatives check the docs \u003Ca href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/\" rel=\"nofollow\">here\u003C/a>\u003C/p> \u003Ch2 data-svelte-h=\"svelte-d01id0\">Creating a cluster\u003C/h2> \u003Cp data-svelte-h=\"svelte-bzt8sq\">For a simple exercise you could just run a single node that runs both the control plane and the worker nodes, i.e. a single node.\u003C/p> \u003Cp data-svelte-h=\"svelte-pew14f\">Simple single node setup:\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># kind-cluster.yaml\u003C/span>\n\u003Cspan class=\"token comment\">## Single node\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> kind.x\u003Cspan class=\"token punctuation\">-\u003C/span>k8s.io/v1alpha4\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Cluster\n\u003Cspan class=\"token key atrule\">nodes\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">role\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> control\u003Cspan class=\"token punctuation\">-\u003C/span>plane\n    \u003Cspan class=\"token key atrule\">extraPortMappings\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">containerPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">30001\u003C/span>\n        \u003Cspan class=\"token key atrule\">hostPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">37899\u003C/span>\n        \u003Cspan class=\"token key atrule\">protocol\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> TCP\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-ygorka\">Two node setup (1x Control plane and 1x worker nodes, with storage):\u003C/p> \u003Cpre class=\"language-yaml\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-yaml\">\u003Cspan class=\"token comment\"># kind-cluster.yaml\u003C/span>\n\u003Cspan class=\"token comment\">## Two nodes - 1 master, 1 worker\u003C/span>\n\u003Cspan class=\"token key atrule\">apiVersion\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> kind.x\u003Cspan class=\"token punctuation\">-\u003C/span>k8s.io/v1alpha4\n\u003Cspan class=\"token key atrule\">kind\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Cluster\n\u003Cspan class=\"token key atrule\">nodes\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">role\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> control\u003Cspan class=\"token punctuation\">-\u003C/span>plane\n    \u003Cspan class=\"token key atrule\">extraPortMappings\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">containerPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">30001\u003C/span>\n        \u003Cspan class=\"token key atrule\">hostPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">37899\u003C/span>\n        \u003Cspan class=\"token key atrule\">protocol\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> TCP\n  \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">role\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> worker\n    \u003Cspan class=\"token key atrule\">extraPortMappings\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">containerPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">30001\u003C/span>\n        \u003Cspan class=\"token key atrule\">hostPort\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">37898\u003C/span>\n        \u003Cspan class=\"token key atrule\">protocol\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> TCP\n    \u003Cspan class=\"token key atrule\">extraMounts\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n        \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">hostPath\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> /Users/parth/k8s/cluster\u003Cspan class=\"token punctuation\">-\u003C/span>0xuh/storage\n          \u003Cspan class=\"token key atrule\">containerPath\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> /files \u003Cspan class=\"token comment\"># Since kind nodes are actualy (docker) containers\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cul data-svelte-h=\"svelte-1nn665k\">\u003Cli>\u003Ccode>extraPortMappings\u003C/code> specifies configuration that helps direct traffic from the host (your machine) to the node (docker container running as k8s node)\u003C/li> \u003Cli>\u003Ccode>containerPort\u003C/code> specifies the port your container running as K8s node will expose ; You’d want your application pod to listen on this port as well\u003C/li> \u003Cli>\u003Ccode>hostPort\u003C/code> specifies the port your host will host will expose; You’d use this port on your local browser to visit your application GUI or specify in your terminal command if using a CLI\u003C/li> \u003Cli>\u003Ccode>extraMounts\u003C/code> specifies configuration that helps us share one or more host (your machine) directories to our nodes\u003C/li> \u003Cli>\u003Ccode>hostPath\u003C/code> is the dir on the host; Contents of this dir would be available to the host under \u003Ccode>/files\u003C/code> (i.e. \u003Ccode>(root)/files\u003C/code>)\u003C/li> \u003Cli>\u003Ccode>containerPath\u003C/code> is the dir on our K8s node (which is actually a Docker container)\u003C/li>\u003C/ul> \u003Cp data-svelte-h=\"svelte-1ve7sgj\">The \u003Ccode>extraPortMappings\u003C/code> along with \u003Ccode>containerPort\u003C/code> and \u003Ccode>hostPort\u003C/code> allow us to use containers as nodes by setting up port forwarding. When setting up a K8s service for instance, you would set up your \u003Ccode>NodePort\u003C/code> same as \u003Ccode>containerPort\u003C/code>.\u003C/p> \u003Cp data-svelte-h=\"svelte-1xhnsc8\">That’s it. Use this command to create the cluster:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kind create cluster \u003Cspan class=\"token parameter variable\">--name\u003C/span> playground \u003Cspan class=\"token parameter variable\">--config\u003C/span> kind-cluster.yaml\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1bd5zfg\">And to teardown:\u003C/p> \u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">kind delete cluster \u003Cspan class=\"token parameter variable\">--name\u003C/span> playground\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-15vpik0\">Changes to the cluster configuration would need a cluster teardown and recreation.\u003C/p>","Localkindcluster",{"title":14,"date":15,"draft":5,"summary":16,"tags":17,"content":20,"slug":21},"Multi sort in Go","2023-12-13","How does sorting on multiple fields work in Go?",[18,19],"go","multisort","\u003Cp data-svelte-h=\"svelte-10gy28v\">While recently working on an piece of Go code I found myself wondering: how can you sort by multiple fields? Imagine you have a struct slice and you want to sort it based on multiple fields of the struct.\u003C/p> \u003Cp data-svelte-h=\"svelte-mam56q\">Here’s an example of a struct representing a simple bank account:\u003C/p> \u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> Account \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tAccountID    \u003Cspan class=\"token builtin\">int\u003C/span>\n\tBalance      \u003Cspan class=\"token builtin\">int\u003C/span>\n\tLastUpdated  \u003Cspan class=\"token builtin\">int\u003C/span>\n\tCreated      \u003Cspan class=\"token builtin\">int\u003C/span>\n\tTransactions \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1a1fjft\">And a slice of the \u003Ccode>Account\u003C/code> struct:\u003C/p> \u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> accounts \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>Account\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-7nlv1w\">We want to sort the \u003Ccode>accounts\u003C/code> slice by the Balance field and if Balance is the same then by AccountID.\u003C/p> \u003Cp data-svelte-h=\"svelte-1ugomnq\">Lets take a simple case first: sort all the accounts by their \u003Ccode>Balance\u003C/code> in decending order:\u003C/p> \u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">sort\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Slice\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>accounts\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token keyword\">func\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">,\u003C/span>j \u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token builtin\">bool\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>i\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Balance \u003Cspan class=\"token operator\">>\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>j\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Balance\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-xvggn8\">Here the helper function returns true if the account at index \u003Ccode>i\u003C/code> in the slice has balance greater than account at index \u003Ccode>j\u003C/code>.\u003C/p> \u003Cp data-svelte-h=\"svelte-6kr7ee\">Now coming to the actual problem:\u003C/p> \u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">sort\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Slice\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>accounts\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token keyword\">func\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">,\u003C/span>j \u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token builtin\">bool\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n  \u003Cspan class=\"token keyword\">if\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>i\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Balance \u003Cspan class=\"token operator\">==\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>j\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Balance \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>i\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>AccountID \u003Cspan class=\"token operator\">>\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>j\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>AccountID\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token keyword\">else\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>i\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Balance \u003Cspan class=\"token operator\">>\u003C/span> accounts\u003Cspan class=\"token punctuation\">[\u003C/span>j\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Balance\n  \u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre> \u003Cp data-svelte-h=\"svelte-1rtn04o\">Thats it! We start by setting up the helper function in a similar fashion but add an if condition: If the balances are same then sort (descending) by \u003Ccode>AccountId\u003C/code>. But if the balances are not the same then sort it as per previously - by \u003Ccode>Balance\u003C/code>.\u003C/p>","MultisortInGo",{"title":23,"date":24,"draft":5,"summary":25,"tags":26,"type":30,"content":31,"slug":32},"Hello world!","2023-12-01","Is this thing up?",[27,28,29],"foobar","sveltekit","tailwindcss","post","\u003Cp data-svelte-h=\"svelte-1wf9jq9\">This website has been in the making for a while. My initial exploration was a setup using Jekyll and Hugo. Both are extremely versatile and have quite a bit of fan following on the web (check out the amount of templates that are out there for Hugo). More attention translates to more development and examples/tutorials to learn. While Hugo was extremely easy to get boilerplate code setup, Jekyll needed a little more familiarization and pouring over the docs. While I don’t have any strong opinions against either of them, they just didn’t feel right for my needs.\u003C/p> \u003Cp data-svelte-h=\"svelte-bcpp3c\">This is till I found SvelteKit. It felt simple yet powerful. As a backend person, I loved how layouts, pages, script and styles all tied together. You could have a site wide overall layout but also one for each page. It felt easy to digest how the load function worked and passed data back to the pages. The tutorials are great (I haven’t yet explored them in their entirety) and I kept coming back for more while reading them. And before I knew it, I had a skeleton up and running on my local dev server.\u003C/p> \u003Cp data-svelte-h=\"svelte-zqex2m\">The next good find was tailwindcss. The simplicity and power of customization really help put the focus back on design and development. The CSS classes felt utilitarian and easy to remember.\u003C/p> \u003Cp data-svelte-h=\"svelte-x0cx0b\">If I have to be specific, both have a common point going for them which is - great documentation. As a developer this is one of the most important factor while adopting a new framework/language or technology. I’ve still just touched the tips of both the technological icebergs and there’s lots more to learn. But I’m loving the results so far and willing to see how far I can explore.\u003C/p> \u003Ch2 data-svelte-h=\"svelte-owhikg\">~*~\u003C/h2>","Helloworld"],"uses":{}}]}
